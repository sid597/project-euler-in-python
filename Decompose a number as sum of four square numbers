import sys, math, random


def gcd(a, b):
    while b:
        a, b = b, a % b
    return a


def jacobi(a, b):
    s = 1
    while a > 1:
        d4 = a >> 2
        m4 = a & 3
        if m4:  # a % 4 != 0
            if m4 == 2:  # a % 4 = 2 (i.e. a % 2 = 0)
                if b & 7 in [3, 5]:
                    s = -s
                a >>= 1
            else:
                if m4 == b & 3 == 3:
                    s = -s
                a, b = b % a, a
        else:  # a % 4 = 0
            a = d4  # a = a / 4
    return a and s


def isProbablePrime2(n):
    return (n > 1) and (pow(2, n - 1, n) == 1)


oddPrimes97 = filter(isProbablePrime2, range(100))
# print reduce(lambda x, y: x * y, range(1, 20 + 1), 1)
# odpri=
oddPrimeProduct97 = reduce(lambda x, y: x * y, oddPrimes97)


def useIsProbablePrime(n):
    return (n > 1) and ((n < 561) or gcd(oddPrimeProduct97, n) == 1) and \
           (pow(2, n >> 1, n) == ((n & 7 in [1, 7]) or (n - 1)))


# Use the fact that True == 1


oddPrimesCache = filter(useIsProbablePrime, range(500))


def fac(n):
    return reduce(lambda x, y: x * y, range(1, n + 1), 1)


def pp(n):
    if n > 0:
        return reduce(lambda x, y: x * y, [p for p in oddPrimes(n - 1)], 1) << 1
    return 1


# def	dp(n, m, r):
# 	g = gcd(m, r)
# 	m /= g
# 	p = m * (n / m) + r / g
# 	if	p < n:
# 		p += m
# 	while not isProbablePrime(p):
# 		p += m
# 	return p


def nextProbablePrime(n):
    while not useIsProbablePrime(n):
        n += 2
    return n


def np(n):
    if n <= 2:
        return 2
    return nextProbablePrime((n & 1) and n or (n + 1))


def isnpk(k, p):
    n = k * p + 1
    if gcd(n, oddPrimeProduct97) > 1:
        return n in oddPrimes97
    t = pow(2, k, n)
    if t == 1:
        return False
    return pow(t, p, n) == 1





def npk(k, p):
    if k & 1:
        k += 1  # k is now even
    while not isnpk(k, p):
        k += 2
    return k


def oddPrimes(limit=-1):
    index = 0
    while (limit < 0) or (index < limit):
        if index >= len(oddPrimesCache):
            oddPrimesCache.append(nextProbablePrime(oddPrimesCache[-1] + 2))
        yield oddPrimesCache[index]
        index += 1


def isSquareProbabilistic(n, certainty):
    generator = oddPrimes()
    while certainty:
        q = generator.next()
        if jacobi(n % q, q) == -1:
            return False, q
        certainty -= 1
    return True, 0


magicN = 10080
squaresModMagicN = {}.fromkeys([(i * i) % magicN for i in range(magicN >> 1)])


def isProbableSquare(n):
    return (n % magicN) in squaresModMagicN


def iunit(p):
    if p % 8 == 5:
        q = 2
    else:
        primes = oddPrimes()
        q = primes.next()

        while jacobi(p % q, q) == 1:
            q = primes.next()
            if (q == 229) and isProbableSquare(p):

                s, r = isqrt(p)
                if r == 0:
                    return s, True
    return pow(q, p >> 2, p), False


ln2 = math.log(2)


def isqrt(n):
    s = int(math.sqrt(n))
    return s, n - s * s


def decomposeProbablePrime(n):
    b, r = iunit(n)
    if r:
        return 0, b, True
    if (b * b + 1) % n:
        return 0, 0, False
    a = n
    while b * b > n:
        a, b = b, a % b
    return b, a % b, True


decomposeExceptions = {
    9634: [56, 57, 57], 2986: [21, 32, 39], 1906: [13, 21, 36],
    1414: [6, 17, 33], 730: [0, 1, 27], 706: [15, 15, 16],
    526: [6, 7, 21], 370: [8, 9, 15], 226: [8, 9, 9],
    214: [3, 6, 13], 130: [0, 3, 11], 85: [0, 6, 7],
    58: [0, 3, 7], 34: [3, 3, 4], 10: [0, 1, 3],
    3: [1, 1, 1], 2: [0, 1, 1]						}


def	decompose(n):


    def	sortScaled(l):
        l.sort()
        return [v * x for x in l]

    # assert n >= 0
    if	n <= 1:
        return [0, 0, 0, n]
    v = 1
    while n % 4 == 0:
        n = n/4
        v += v
    sq, p = isqrt(n)
    if	p == 0:
        return [0, 0, 0, v * sq]
    if	(n %4 == 1) and useIsProbablePrime(n):
        s, r, done = decomposeProbablePrime(n)
        if	done :
            return sortScaled([0, 0, s, r])
    if	n % 8 == 7:

        delta, n = sq, p
        if	sq % 4 == 0:
            delta -= 1
            n += delta + delta + 1

        sq, p = isqrt(n)

    else:
        delta = 0

    if	n in decomposeExceptions:
        return sortScaled([delta] + decomposeExceptions[n])

    if	n % 4 == 3:
        if	sq & 1 == 0:
            sq -= 1
            p += sq + sq + 1
        p >>= 1
        while True:
            if useIsProbablePrime(p):
                r0, r1, done = decomposeProbablePrime(p)
                if done:
                    return sortScaled([delta, sq, r0 + r1, abs(r0 - r1)])
            sq -= 2
            if	sq < 0:
                return 4 * [0]
            p += sq + sq + 2

    if	(n - sq) & 1 == 0:
        sq -= 1
        p += sq + sq + 1
    while True:
        if useIsProbablePrime(p):
            r0, r1, done = decomposeProbablePrime(p)
            if done:
                return sortScaled([delta, sq, r0, r1])
        sq -= 2
        if	sq < 0:
            return 4 * [0]


        p+= 4 * (sq + 1)
