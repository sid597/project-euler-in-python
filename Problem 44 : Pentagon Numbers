
from math import sqrt

pent = lambda(x): x*(3*x-1)/2
def is_pent(x):
	f = (.5 + sqrt(.25+6*x))/3
	if f - int(f) == 0:
		return True
	else:
		return False

flag = False
for i in range(1,3000):
	if i % 100 == 0:
		print 'i = %d' % i 
	for j in range(i+1,3000):
		if is_pent(pent(j) - pent(i)) and is_pent(pent(j) + pent(i)):
			print 'answer = %d' % (pent(j) - pent(i))
			flag = True
			break
	if flag:
		break
    
## another solution found in thread   
    
1. Define smallest pair as pair which has minimal sum, that is minimal `m'
2. By definition:  P(n+i)+P(n) = P(m), P(n+i)-P(n) = P(k),
where n,i,m,k - positive integers, from this it follows that: 2*P(n+i) = P(m)+P(k), 2*P(n) = P(m)-P(k)
Therefor the solution is:
Enumerate sums `P(m)', from smaller sums (smaller `m') to bigger one; for all possible differences `P(k)', where `k' less then `m'; while the sought quantity is not found.
    
